User Interface (Presentation Layer)
- routes - obsługa żądań HTTP (GET, POST)
- views - to, co widzi użytkownik, wszelkie pliki html, css

Application Layer
- realizuje logikę procesów biznesowych
- koordynuje przepływ danych między warstwami
- zawiera serwisy aplikacyjne, które wykonują operacje na danych z domeny
- korzysta z metod zdefiniowanych w Infrastructure Layer

Domain Layer
- zawiera klasy reprezentujące kluczowe pojęcia w systemie (domain - model)
- zawiera metody biznesowe, które operują na tych danych (domain - model - repositories)
- JEDYNIE ICH INTERFEJSY, cała implementacja jest zawarta w Infrastructure Layer 

Infrastructure Layer
- zajmuje się szczegółami technicznymi i przechowywaniem danych
- komunikuje się z bazą danych, plikami, API zewnętrzymi, etc.
- implementuje logikę przechowywania i dostępu do danych (CRUD)
- nie zajmuje się żadną walidacją

Cross-Cutting Concerns
- wszelkie akcje i narzędzia używane w całej aplikacji (niezależne od domeny ani infrastruktury)
- logowanie, obsługa błędów, walidacja, bezpieczeństwo, etc. 
- nie pasują do żadnej innej kategorii
- korzystać z nich w Application Layer (Infrastructure Layer może mieć jedynie jakąś logikę do obsługi błędów połączeń z bazą danych)



Jak warstwy ze sobą współpracują?
Przykład scenariusza w sklepie internetowym:
-- Warstwa UI/API wywołuje metodę getAllProducts() w Application Layer.
-- Application Layer (np. ProductService) pyta Infrastructure Layer o listę produktów (ProductRepository.findAll()).
-- Infrastructure Layer zwraca dane z bazy danych (lub pamięci), które są reprezentowane jako obiekty domeny w Domain Layer (Product).
-- Dane są zwracane do warstwy UI/API, gdzie są wyświetlane użytkownikowi.


TypeORM to narzędzie ORM (Object-Relational Mapper) dla Node.js, które:
- Umożliwia mapowanie klas/obiektów na tabele w bazie danych SQL (np. SQL Server, MySQL, PostgreSQL).
- Automatyzuje wiele zadań związanych z bazą danych, takich jak:
    Tworzenie tabel i relacji (bez pisania SQL),
    Operacje CRUD (Create, Read, Update, Delete) przy użyciu metod w kodzie,
    Obsługa transakcji i relacji między tabelami w sposób obiektowy.

https://typeorm.io/mongodb


TO DO LIST:

-- METODY --
- application layer - każda metoda zwraca obiekty o tym samym schemacie - ułatwi
    to robotę przy odpowiedziach w warstwie routes
- userInterface layer - routes (przechwytywanie https)
- userInterface layer - views 
    -- layouts - basicowe widoki, które będą się wyświetlać (i będą prowadzić do szczegółowych widoków w
       odpowiednich folderach)
    -- xViews - (prawie) każda metoda z xService ma mieć swój widok w html
        * usuwanie / modyfikowanie produktów przez admina można jakoś ugryźć w 1 pliku poprzez
          wyświetlenie mu listy wszystkich produktów i dodatkowych przycisków modyfikacji / usunięcia
        * wyświetlenie listy wszystkich produktów + u góry opcje sortowania, filtrowania + opcja zobaczenia koszyka
        * po zalogowaniu --||-- + przycisk dodania do koszyka



-- Idea Projektu --
- na dzień dobry okno z produktami (każdy ze zdjęciem, nazwą i ceną)
- po kliknięciu w produkt wyświetla się jeszcze category, desc, stock, sizesAvailable 
- okienko do wyszukania produktów / filtrowania (po category, name, price, sizesAvailable)
- okienko do zalogowania
    * zaloguj
    * utwórz konto (nowy User dostaje pusty Cart)
    * zaloguj jako administrator

PO ZALOGOWANIU JAKO USER
- okno z produktami (każdy ze zdjęciem, nazwą i ceną)
- po kliknięciu w produkt wyświetla się jeszcze category, descr, stock, sizesAvailable + możliwość
  dodania produktu do koszyka 
- okienko do wyszukania produktów / filtrowania
- okienko do wylogowania
- okienko do zobaczenia koszyka 
    * lista dodanych produktów 
    * możliwość modyfikacji ilości / usuwania z koszyka
    * podsumowanie koszyka (cena, liczba artykułów)
    * przycisk do złożenia zamówienia (stworzy się nowy obiekt w tabeli Orders)

PO ZALOGOWANIU JAKO ADMIN 
- okienko do modyfikacji bazy produktów (dodawanie / usuwanie / modyfikacja atrybutów)
- okienko do przeglądania bazy userów
- okienko do przeglądania koszyków
- okienko do przeglądania złożonych zamówień
- okienko do wylogowania



README:
-- ŚRODOWISKO --
- Node.js
- TypeScript
- npm install ts-node typescript @types/node --save-dev

-- ODPALANIE --
Set-ExecutionPolicy RemoteSigned (powershell)
node --loader ts-node/esm src/main.ts (LUB tsc -> node .\Application.js)

